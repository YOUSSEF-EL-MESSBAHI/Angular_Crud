{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/LENOVO/Desktop/Angular-All in one/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from \"rxjs\";\nimport jwtDecode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-state.service\";\nexport class AuthService {\n  constructor(http, appState) {\n    this.http = http;\n    this.appState = appState;\n  }\n  login(username, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let user = yield firstValueFrom(_this.http.get(\"http://localhost:8089/users/\" + username));\n      //console.log(password);\n      //console.log(user.password);\n      //console.log(atob(user.password));\n      if (password == atob(user.password)) {\n        let decodedJwt = jwtDecode(user.token);\n        _this.appState.setAuthState({\n          isAuthenticated: true,\n          username: decodedJwt.sub,\n          roles: decodedJwt.roles,\n          token: user.token\n        });\n        return Promise.resolve(true);\n      } else {\n        return Promise.reject(\"Bad credentials\");\n      }\n    })();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppStateService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAAQA,cAAc,QAAO,MAAM;AAEnC,OAAOC,SAAS,MAAM,YAAY;;;;AAKlC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAiB,EAAUC,QAA0B;IAArD,SAAI,GAAJD,IAAI;IAAuB,aAAQ,GAARC,QAAQ;EAAsB;EAEvEC,KAAK,CAACC,QAAiB,EAAEC,QAAiB;IAAA;IAAA;MAE9C,IAAIC,IAAI,SAAYT,cAAc,CAAC,KAAI,CAACI,IAAI,CAACM,GAAG,CAAC,8BAA8B,GAACH,QAAQ,CAAC,CAAC;MAC1F;MACA;MACA;MACA,IAAGC,QAAQ,IAAEG,IAAI,CAACF,IAAI,CAACD,QAAQ,CAAC,EAAC;QAC/B,IAAII,UAAU,GAAOX,SAAS,CAACQ,IAAI,CAACI,KAAK,CAAC;QAC1C,KAAI,CAACR,QAAQ,CAACS,YAAY,CAAC;UACzBC,eAAe,EAAG,IAAI;UACtBR,QAAQ,EAAGK,UAAU,CAACI,GAAG;UACzBC,KAAK,EAAGL,UAAU,CAACK,KAAK;UACxBJ,KAAK,EAAGJ,IAAI,CAACI;SACd,CAAC;QACF,OAAOK,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;OAC7B,MAAM;QACL,OAAOD,OAAO,CAACE,MAAM,CAAC,iBAAiB,CAAC;;IACzC;EACH;;AAtBWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFV;AAAM","names":["firstValueFrom","jwtDecode","AuthService","constructor","http","appState","login","username","password","user","get","atob","decodedJwt","token","setAuthState","isAuthenticated","sub","roles","Promise","resolve","reject","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\Angular-All in one\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {firstValueFrom} from \"rxjs\";\nimport {AppStateService} from \"./app-state.service\";\nimport jwtDecode from \"jwt-decode\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http : HttpClient, private appState : AppStateService) { }\n\n  async login(username : string, password : string){\n\n    let user:any= await firstValueFrom(this.http.get(\"http://localhost:8089/users/\"+username));\n    //console.log(password);\n    //console.log(user.password);\n    //console.log(atob(user.password));\n    if(password==atob(user.password)){\n      let decodedJwt:any = jwtDecode(user.token);\n      this.appState.setAuthState({\n        isAuthenticated : true,\n        username : decodedJwt.sub,\n        roles : decodedJwt.roles,\n        token : user.token\n      });\n      return Promise.resolve(true);\n    } else {\n      return Promise.reject(\"Bad credentials\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}