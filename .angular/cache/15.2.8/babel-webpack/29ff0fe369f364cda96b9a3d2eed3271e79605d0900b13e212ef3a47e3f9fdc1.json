{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-state.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizationGuard {\n  constructor(appState, router) {\n    this.appState = appState;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.appState.authState.roles.includes(route.data['requiredRoles'])) {\n      return true;\n    } else {\n      this.router.navigateByUrl(\"/admin/notAuthorized\");\n      return false;\n    }\n  }\n}\nAuthorizationGuard.ɵfac = function AuthorizationGuard_Factory(t) {\n  return new (t || AuthorizationGuard)(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.Router));\n};\nAuthorizationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizationGuard,\n  factory: AuthorizationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAeA,OAAM,MAAOA,kBAAkB;EAC7BC,YAAoBC,QAA0B,EAAUC,MAAe;IAAnD,aAAQ,GAARD,QAAQ;IAA4B,WAAM,GAANC,MAAM;EAC9D;EACAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAG,IAAI,CAACJ,QAAQ,CAACK,SAAS,CAACC,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAACK,IAAI,CAAC,eAAe,CAAC,CAAC,EAAC;MACrE,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,sBAAsB,CAAC;MAClD,OAAO,KAAK;;EAEf;;AAZWX,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAY,SAAlBZ,kBAAkB;EAAAa,YAFjB;AAAM","names":["AuthorizationGuard","constructor","appState","router","canActivate","route","state","authState","roles","includes","data","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\Angular-All in one\\src\\app\\guards\\authorization.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AppStateService} from \"../services/app-state.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationGuard {\n  constructor(private appState : AppStateService, private router : Router) {\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if(this.appState.authState.roles.includes(route.data['requiredRoles'])){\n      return true;\n    } else {\n      this.router.navigateByUrl(\"/admin/notAuthorized\")\n     return false;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}